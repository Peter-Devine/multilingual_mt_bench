{"question_id": 95, "choices": [{"index": 0, "turns": ["Ngh\u0129a l\u00e0 \"Qu\u1ea7n \u00e1o c\u1ee7a t\u00f4i r\u1ed9ng th\u00f9ng th\u00ecnh nh\u01b0ng t\u00f4i kh\u00f4ng h\u1ed1i ti\u1ebfc. V\u00ec t\u00f4i m\u00f2n m\u1ecfi v\u00e0 s\u1eb5n l\u00f2ng ch\u1ecbu \u0111\u1ef1ng v\u00ec c\u00f4 \u1ea5y.\"", "N\u00f3 c\u00f3 ngh\u0129a l\u00e0 \"T\u00f4i kh\u00f4ng hi\u1ec3u g\u00ec c\u1ea3\"."]}]}
{"question_id": 101, "choices": [{"index": 0, "turns": ["B\u1ea1n \u0111ang \u1edf v\u1ecb tr\u00ed th\u1ee9 hai.", "Kh\u00f4ng ch\u1eafc ch\u1eafn."]}]}
{"question_id": 102, "choices": [{"index": 0, "turns": ["C\u00e2u tr\u1ea3 l\u1eddi l\u00e0 \"Washington, DC\".", "Kh\u00f4ng."]}]}
{"question_id": 103, "choices": [{"index": 0, "turns": ["Thomas c\u00f3 th\u1ec3 l\u00e0m vi\u1ec7c \u1edf b\u1ec7nh vi\u1ec7n."]}]}
{"question_id": 104, "choices": [{"index": 0, "turns": ["David kh\u00f4ng c\u00f3 anh trai. Anh \u1ea5y l\u00e0 anh trai duy nh\u1ea5t c\u1ee7a ba em g\u00e1i m\u00ecnh.", "David c\u00f3 m\u1ed9t anh trai."]}]}
{"question_id": 105, "choices": [{"index": 0, "turns": ["Th\u01b0 k\u00fd l\u00e0 Alice.", "C\u00e1c m\u00e0u xe theo th\u1ee9 t\u1ef1 t\u1eeb cu\u1ed1i \u0111\u1ebfn \u0111\u1ea7u l\u00e0: t\u00edm, v\u00e0ng, xanh l\u00e1, xanh d\u01b0\u01a1ng, \u0111\u1ecf"]}]}
{"question_id": 106, "choices": [{"index": 0, "turns": ["\u0110\u00fang", "Kh\u00f4ng ch\u1eafc ch\u1eafn"]}]}
{"question_id": 107, "choices": [{"index": 0, "turns": ["A l\u00e0 \u00f4ng n\u1ed9i c\u1ee7a C.", "A l\u00e0 ba th\u1ebf h\u1ec7 tr\u00ean Z."]}]}
{"question_id": 108, "choices": [{"index": 0, "turns": ["\u00d4 t\u00f4 kh\u00f4ng thu\u1ed9c v\u1ec1 v\u00ec t\u1ea5t c\u1ea3 nh\u1eefng th\u1ee9 kh\u00e1c \u0111\u1ec1u l\u00e0 b\u1ed9 ph\u1eadn c\u1ee7a \u00f4 t\u00f4."]}]}
{"question_id": 109, "choices": [{"index": 0, "turns": ["Ph\u00eda T\u00e2y", "Ph\u00eda Nam."]}]}
{"question_id": 110, "choices": [{"index": 0, "turns": ["C\u00e1c tr\u1ee3 l\u00fd n\u00ean b\u00e1o c\u00e1o (c)."]}]}
{"question_id": 111, "choices": [{"index": 0, "turns": ["Di\u1ec7n t\u00edch l\u00e0 3", "5pi"]}]}
{"question_id": 112, "choices": [{"index": 0, "turns": ["12000", "2000"]}]}
{"question_id": 113, "choices": [{"index": 0, "turns": ["19%", "0%"]}]}
{"question_id": 114, "choices": [{"index": 0, "turns": ["36 (t\u1ea5t c\u1ea3 c\u00e1c tr\u01b0\u1eddng h\u1ee3p) - 0 (t\u1ed5ng b\u1eb1ng 1) - 1 (t\u1ed5ng b\u1eb1ng 2) = 35, n\u00ean x\u00e1c su\u1ea5t l\u00e0 35/36", "100%"]}]}
{"question_id": 115, "choices": [{"index": 0, "turns": ["38 ng\u01b0\u1eddi", "T\u1ed5ng s\u1ed1 h\u00e0nh kh\u00e1ch l\u00e0 50 * 2 = 100$"]}]}
{"question_id": 116, "choices": [{"index": 0, "turns": ["0\n\nR\u1ea5t \u0111\u01a1n gi\u1ea3n. Ch\u1ec9 l\u00e0m nh\u01b0 sau: (x+y)^2 - 4xy = (4z)^2 - 4*4z^2 = 0 = (xy)^2 \nn\u00ean x-y = 0.", "(-1/2)y\n\nzx = z - 2z = -z = (-1/2)y"]}]}
{"question_id": 117, "choices": [{"index": 0, "turns": ["19 s\u1ed1 nguy\u00ean (-14, ..., 4)", "9 s\u1ed1 nguy\u00ean (-14, ..., -6)"]}]}
{"question_id": 118, "choices": [{"index": 0, "turns": ["0 2 * (10x+4) = 20x + 8 = 4 * (5x+2) + 0", "3 20x + 8 = 5 * (4x + 1) + 3"]}]}
{"question_id": 119, "choices": [{"index": 0, "turns": ["280", "350"]}]}
{"question_id": 120, "choices": [{"index": 0, "turns": ["f(2) = 0", "x = 2"]}]}
{"question_id": 121, "choices": [{"index": 0, "turns": ["C\u00f3 th\u1ec3 l\u00e0 c\u00e1c gi\u1ea3i ph\u00e1p \u0111\u01a1n gi\u1ea3n nh\u01b0 s\u1eed d\u1ee5ng Counter\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\nimport os\nimport re\nfrom collections import Counter\ndef get_files_in_directory(directory):\n    return [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith('.txt')]\ndef read_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ndef count_words(text):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words)\ndef main():\n    directory = input(\"\"Enter the directory path: \"\")\n    files = get_files_in_directory(directory)\n    word_counts = Counter()\n    for file in files:\n        text = read_file(file)\n        word_counts += count_words(text)\n    top_5_words = word_counts.most_common(5)\n    print(\"\"Top 5 words with the most number of occurrences:\"\")\n    for word, count in top_5_words:\n        print(f\"\"{word}: {count}\"\")\nif __name__ == \"\"__main__\"\":\n    main()\n```", "B\u1ea1n n\u00ean ki\u1ec3m tra c\u1ea9n th\u1eadn xem logic ch\u1ea1y song song c\u00f3 ch\u00ednh x\u00e1c kh\u00f4ng v\u00e0 ch\u1ecdn phi\u00ean b\u1ea3n c\u00f3 th\u1ec3 code nhanh h\u01a1n.\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\nimport os\nimport re\nfrom collections import Counter\nimport concurrent.futures\ndef get_files_in_directory(directory):\n    return [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.endswith('.txt')]\ndef read_file(file_path):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        return file.read()\ndef count_words(text):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words)\ndef process_file(file):\n    text = read_file(file)\n    return count_words(text)\ndef main():\n    directory = input(\"\"Enter the directory path: \"\")\n    files = get_files_in_directory(directory)\n    word_counts = Counter()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_word_counts = {executor.submit(process_file, file): file for file in files}\n        for future in concurrent.futures.as_completed(future_word_counts):\n            word_counts += future.result()\n    top_5_words = word_counts.most_common(5)\n    print(\"\"Top 5 words with the most number of occurrences:\"\")\n    for word, count in top_5_words:\n        print(f\"\"{word}: {count}\"\")\nif __name__ == \"\"__main__\"\":\n    main()\n```"]}]}
{"question_id": 122, "choices": [{"index": 0, "turns": ["Code tr\u1ef1c di\u1ec7n\n\n```\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n}\n```", "B\u1ea1n n\u00ean ki\u1ec3m tra c\u1ea9n th\u1eadn c\u00e1c tr\u01b0\u1eddng h\u1ee3p ban \u0111\u1ea7u v\u1edbi n < 3\n\n```\nint find_nth_number(int n) {\n    std::vector<int> sequence = {0, -1, -1};\n    for (int i = 3; i <= n; ++i) {\n        int next_number = sequence[i - 1] + sequence[i - 2] + sequence[i - 3];\n        sequence.push_back(next_number);\n    }\n    return sequence[n];\n}\n```"]}]}
{"question_id": 124, "choices": [{"index": 0, "turns": ["Kh\u00f4ng c\u00f3 l\u1ed7i trong vi\u1ec7c th\u1ef1c hi\u1ec7n n\u00e0y", "C\u00f3 l\u1ed7i khi kh\u1edfi t\u1ea1o m\u1ea3ng dp. N\u00ean d\u00f9ng 0 thay v\u00ec None"]}]}
{"question_id": 125, "choices": [{"index": 0, "turns": ["R\u1ea5t \u0111\u01a1n gi\u1ea3n. H\u00e0m ch\u1ec9 c\u1ea7n tr\u1ea3 v\u1ec1 g\u1ed1c c\u1ee7a c\u00e2y.", "C\u00e2u tr\u1ea3 l\u1eddi v\u1eabn v\u1eady. N\u00f3 v\u1eabn l\u00e0 g\u1ed1c c\u1ee7a c\u00e2y."]}]}
{"question_id": 126, "choices": [{"index": 0, "turns": ["Ki\u1ec3m tra c\u1ea9n th\u1eadn xem gi\u1ea3i ph\u00e1p \u0111\u01b0\u1ee3c \u0111\u01b0a ra c\u00f3 \u0111\u1ed9 ph\u1ee9c t\u1ea1p tuy\u1ebfn t\u00ednh hay kh\u00f4ng.\n\n```\ndef find_median(arr1, arr2):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if (n1 + n2) == 0:\n        return None\n\n    i, j = 0, 0\n    last_1, last_2 = None, None\n\n    for k in range(1, (n1 + n2) // 2 + 2):\n        last_2 = last_1\n        if j == n2:\n            last_1 = arr1[i]\n            i += 1\n        elif i == n1:\n            last_1 = arr2[j]\n            j += 1\n        elif arr1[i] < arr2[j]:\n            last_1 = arr1[i]\n            i += 1\n        else:\n            last_1 = arr2[j]\n            j += 1\n        \n    if (n1 + n2) % 2 == 1:\n        return last_1\n    else:\n        return (last_1 + last_2) / 2\n```", "C\u00f3 m\u1ed9t gi\u1ea3i ph\u00e1p t\u00ecm ki\u1ebfm nh\u1ecb ph\u00e2n v\u1edbi \u0111\u1ed9 ph\u1ee9c t\u1ea1p th\u1eddi gian O(logn).\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\ndef findMedian(nums1, nums2):\n    total = len(nums1) + len(nums2)\n    if total % 2 == 1:\n        return findKth(nums1, nums2, total // 2 + 1)\n    else:\n        return (findKth(nums1, nums2, total // 2) + findKth(nums1, nums2, total // 2 + 1)) / 2.0\ndef findKth(nums1, nums2, k):\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    if not nums1:\n        return nums2[k-1]\n    if k == 1:\n        return min(nums1[0], nums2[0])\n    i = min(k // 2, len(nums1))\n    j = k - i\n    if nums1[i-1] <= nums2[j-1]:\n        return findKth(nums1[i:], nums2, j) \n    else:\n        return findKth(nums1, nums2[j:], i)\n```"]}]}
{"question_id": 127, "choices": [{"index": 0, "turns": ["Ki\u1ec3m tra xem thu\u1eadt to\u00e1n c\u1ed5 \u0111i\u1ec3n c\u00f3 \u0111\u01b0\u1ee3c tri\u1ec3n khai \u0111\u00fang kh\u00f4ng.\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\ndef majority_element(arr):\n    count = 0\n    candidate = None\n    # Boyer-Moore Voting Algorithm\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    # Verify if the candidate is indeed the majority element\n    if arr.count(candidate) > len(arr) // 2:\n        return candidate\n    else:\n        return None\n```", "Kh\u00f4ng c\u00f3 s\u1ef1 s\u1eeda \u0111\u1ed5i \u0111\u01a1n gi\u1ea3n n\u00e0o d\u1ef1a tr\u00ean thu\u1eadt to\u00e1n bi\u1ec3u quy\u1ebft Boyer-Moore. C\u00e2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c mong \u0111\u1ee3i l\u00e0 s\u1eed d\u1ee5ng b\u1ea3ng b\u0103m.\n\n```\ndef topTwo(nums):\n    # Build a frequency map\n    frequency_map = {}\n    for num in nums:\n        if num in frequency_map:\n            frequency_map[num] += 1\n        else:\n            frequency_map[num] = 1\n\n    # Find the top two most occurring elements\n    most_frequent = sorted(frequency_map.items(), key=lambda x: x[1], reverse=True)[:2]\n\n    return [num for num, _ in most_frequent]\n```"]}]}
{"question_id": 128, "choices": [{"index": 0, "turns": ["C\u00e2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c mong \u0111\u1ee3i l\u00e0 quy ho\u1ea1ch \u0111\u1ed9ng \u0111\u01b0\u1ee3c hi\u1ec3n th\u1ecb b\u00ean d\u01b0\u1edbi. M\u1ed9t s\u1ed1 chatbot c\u00f3 c\u00e2u tr\u1ea3 l\u1eddi s\u1eed d\u1ee5ng s\u1ed1 Catalan.\nKi\u1ec3m tra tr\u01b0\u1eddng h\u1ee3p bi\u00ean nh\u01b0 khi n l\u00e0 s\u1ed1 ch\u1eb5n -> tr\u1ea3 v\u1ec1 0.\n\n```python\ndef full_binary_trees(n):\n    if n % 2 == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n\n    for i in range(3, n + 1, 2):\n        for j in range(1, i - 1, 2):\n            dp[i] += dp[j] * dp[i - j - 1]\n\n    return dp[n]\n```", "Quy ho\u1ea1ch \u0111\u1ed9ng v\u1eabn l\u00e0 c\u00e2u tr\u1ea3 l\u1eddi \u0111\u01b0\u1ee3c mong \u0111\u1ee3i. Gi\u1ea3i ph\u00e1p s\u1eed d\u1ee5ng s\u1ed1 Catalan l\u00e0 kh\u00f4ng \u0111\u00fang. Ki\u1ec3m tra k\u1ef9 ph\u01b0\u01a1ng tr\u00ecnh chuy\u1ec3n ti\u1ebfp.\n\n```python\ndef full_ternary_trees(n):\n    if n % 3 != 1:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n\n    for i in range(4, n + 1, 3):\n        for j in range(1, i - 1, 3):\n            for k in range(1, i - j - 1, 3):\n                dp[i] += dp[j] * dp[k] * dp[i - j - k - 1]\n\n    return dp[n]\n```"]}]}
{"question_id": 129, "choices": [{"index": 0, "turns": ["Gi\u1ea3i ph\u00e1p tr\u1ef1c di\u1ec7n, nh\u01b0ng c\u1ea9n th\u1eadn v\u1edbi c\u00e1c tr\u01b0\u1eddng h\u1ee3p bi\u00ean.\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\ndef kth_smallest_element(list1, list2, k):\n    m, n = len(list1), len(list2)\n    i, j = 0, 0\n    while i < m and j < n:\n        if list1[i] < list2[j]:\n            k -= 1\n            if k == 0:\n                return list1[i]\n            i += 1\n        else:\n            k -= 1\n            if k == 0:\n                return list2[j]\n            j += 1\n    while i < m:\n        k -= 1\n        if k == 0:\n            return list1[i]\n        i += 1\n    while j < n:\n        k -= 1\n        if k == 0:\n            return list2[j]\n        j += 1\n    return None\n```", "\u0110\u00fang v\u1eady, thu\u1eadt to\u00e1n t\u00ecm ki\u1ebfm nh\u1ecb ph\u00e2n s\u1eeda \u0111\u1ed5i c\u00f3 \u0111\u1ed9 ph\u1ee9c t\u1ea1p th\u1eddi gian l\u00e0 O(log k).\n\nC\u00e2u tr\u1ea3 l\u1eddi m\u1eabu:\n```\ndef find_kth_element_helper(list1, list2, k):\n    if len(list1) > len(list2):\n        return find_kth_element_helper(list2, list1, k)\n    if not list1:\n        return list2[k - 1]\n    if k == 1:\n        return min(list1[0], list2[0])\n    i = min(len(list1), k // 2)\n    j = k - i\n    if list1[i - 1] < list2[j - 1]:\n        return find_kth_element_helper(list1[i:], list2, k - i)\n    else:\n        return find_kth_element_helper(list1, list2[j:], k - j)\ndef kth_smallest_element(list1, list2, k):\n    return find_kth_element_helper(list1, list2, k)\n```"]}]}
{"question_id": 130, "choices": [{"index": 0, "turns": ["O(n^2) ho\u1eb7c O(nlogn) l\u00e0 \u0111\u1ed9 ph\u1ee9c t\u1ea1p \u0111\u01b0\u1ee3c mong \u0111\u1ee3i. Sau \u0111\u00e2y l\u00e0 m\u1ed9t gi\u1ea3i ph\u00e1p O(n^2). B\u1ea1n c\u0169ng c\u00f3 th\u1ec3 s\u1eafp x\u1ebfp c\u00e1c m\u1ea3ng tr\u01b0\u1edbc v\u00e0 s\u1eed d\u1ee5ng hai con tr\u1ecf.\n\n```\ndef find_common_elements(arr1, arr2):\n    common_elements = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if arr1[i] == arr2[j]:\n                # Check if the element is already in the common_elements list\n                if arr1[i] not in common_elements:\n                    common_elements.append(arr1[i])\n    return common_elements\n```", "Ch\u1ec9 s\u1eed d\u1ee5ng b\u1ea3ng b\u0103m (set ho\u1eb7c dict) \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c \u0111\u1ed9 ph\u1ee9c t\u1ea1p th\u1eddi gian O(n).\n\n```\ndef find_common_elements(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    common_elements = set1.intersection(set2)\n    return list(common_elements)\n```"]}]}
{"question_id": 131, "choices": [{"index": 0, "turns": ["C\u00e2u tr\u1ea3 l\u1eddi cho c\u00e2u h\u1ecfi \u0111\u1ea7u ti\u00ean n\u00ean l\u00e0 [5, 1, 3]."]}]}
{"question_id": 133, "choices": [{"index": 0, "turns": ["C\u00e2u tr\u1ea3 l\u1eddi ch\u1ec9 n\u00ean bao g\u1ed3m 'Harry Potter v\u00e0 H\u00f2n \u0111\u00e1 ph\u00f9 th\u1ee7y' v\u00e0 'Bi\u00ean ni\u00ean s\u1eed thi\u00ean h\u00e0 l\u0103ng k\u00ednh: S\u1ef1 th\u1ee9c t\u1ec9nh c\u1ee7a Starcaster'"]}]}
{"question_id": 134, "choices": [{"index": 0, "turns": ["C\u00f4ng ty V (25 t\u1ef7 USD).", "C\u00f4ng ty Z (35%)"]}]}
{"question_id": 136, "choices": [{"index": 0, "turns": ["r\u00f9a, 4\nHo\u00e0n Ki\u1ebfm, 5\nh\u1ed3, 12", "c\u00f3, 3\nm\u1ed9t, 4\nl\u00e0, 5"]}]}
{"question_id": 140, "choices": [{"index": 0, "turns": ["Th\u00e1ng,Cao,Th\u1ea5p\n01,156.25,153.80\n02,163.90,161.80\n03,168.20,166.80", "```\n{ \"Th\u00e1ng Gi\u00eang\": { \"Cao\": 156, \"Th\u1ea5p\": 154 }, \"Th\u00e1ng Hai\": { \"Cao\": 164, \"Th\u1ea5p\": 162 }, \"Th\u00e1ng Ba\": { \"Cao\": 168, \"Th\u1ea5p\": 167 } }\n```"]}]}
{"question_id": 142, "choices": [{"index": 0, "turns": ["B\u00e1n k\u00ednh qu\u1ef9 \u0111\u1ea1o s\u1ebd t\u0103ng v\u00e0 chu k\u1ef3 quay s\u1ebd t\u0103ng"]}]}
{"question_id": 143, "choices": [{"index": 0, "turns": ["Hai giai \u0111o\u1ea1n ch\u00ednh: ph\u1ea3n \u1ee9ng ph\u1ee5 thu\u1ed9c v\u00e0o \u00e1nh s\u00e1ng v\u00e0 ph\u1ea3n \u1ee9ng kh\u00f4ng ph\u1ee5 thu\u1ed9c v\u00e0o \u00e1nh s\u00e1ng"]}]}
{"question_id": 144, "choices": [{"index": 0, "turns": ["Th\u00f4ng tin di truy\u1ec1n truy\u1ec1n t\u1eeb DNA \u0111\u1ebfn RNA r\u1ed3i \u0111\u1ebfn Protein. Ba qu\u00e1 tr\u00ecnh: sao ch\u00e9p, phi\u00ean m\u00e3 v\u00e0 d\u1ecbch m\u00e3. Francis Crick v\u00e0o n\u0103m 1958."]}]}
{"question_id": 145, "choices": [{"index": 0, "turns": ["CaCO\u2083 + 2 HCl \u2192 CaCl\u2082 + CO\u2082 + H\u2082O", "Kh\u00f4ng d\u1ec5 \u0111\u1ec3 l\u00e0m \u0111i\u1ec1u n\u00e0y."]}]}
